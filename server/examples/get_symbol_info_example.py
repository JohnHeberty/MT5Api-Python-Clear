"""
Exemplo: GetSymbolInfo - Obter informa√ß√µes de um s√≠mbolo espec√≠fico
Demonstra o uso do endpoint /GetSymbolInfo/
"""
import sys
import os
sys.path.append(os.path.dirname(__file__))

from base import BaseExample, ApiKeyRequiredMixin, ApiClient, ApiConfig
from config import API_BASE_URL, API_KEY, DEFAULT_SYMBOL, TEST_SYMBOLS

class GetSymbolInfoExample(BaseExample, ApiKeyRequiredMixin):
    """
    Exemplo do endpoint GetSymbolInfo
    
    Princ√≠pios SOLID aplicados:
    - Single Responsibility: Foca apenas em demonstrar GetSymbolInfo
    - Open/Closed: Pode ser estendido para m√∫ltiplos s√≠mbolos sem modifica√ß√£o
    - Liskov Substitution: Substitui BaseExample perfeitamente
    - Interface Segregation: Usa apenas m√©todos necess√°rios
    - Dependency Inversion: Depende de abstra√ß√µes (ApiClient)
    """
    
    def __init__(self, client: ApiClient, symbol: str = DEFAULT_SYMBOL):
        super().__init__(client)
        self.symbol = symbol
    
    def execute(self) -> dict:
        """Executar chamada para GetSymbolInfo"""
        payload = {
            "symbol": self.symbol
        }
        return self.client.post("/GetSymbolInfo/", payload)
    
    def get_description(self) -> str:
        return f"GetSymbolInfo - Informa√ß√µes detalhadas do s√≠mbolo {self.symbol}"
    
    def format_response(self, response: dict) -> str:
        """Override para formato customizado de informa√ß√µes do s√≠mbolo"""
        if not response.get("OK"):
            return super().format_response(response)
        
        symbol_info = response.get("Resposta", {})
        
        if not symbol_info:
            return "üì≠ Informa√ß√µes do s√≠mbolo n√£o encontradas"
        
        result = f"‚úÖ Informa√ß√µes do s√≠mbolo {self.symbol}:\n\n"
        result += f"üìõ Nome: {symbol_info.get('name', 'N/A')}\n"
        result += f"üìù Descri√ß√£o: {symbol_info.get('description', 'N/A')}\n"
        result += f"üî¢ D√≠gitos: {symbol_info.get('digits', 'N/A')}\n"
        result += f"üìç Ponto: {symbol_info.get('point', 'N/A')}\n"
        result += f"üí± Moeda Base: {symbol_info.get('currency_base', 'N/A')}\n"
        result += f"üí∞ Moeda Lucro: {symbol_info.get('currency_profit', 'N/A')}\n"
        result += f"üè¶ Moeda Margem: {symbol_info.get('currency_margin', 'N/A')}\n"
        result += f"üìä Volume M√≠nimo: {symbol_info.get('volume_min', 'N/A')}\n"
        result += f"üìà Volume M√°ximo: {symbol_info.get('volume_max', 'N/A')}\n"
        result += f"‚öôÔ∏è Modo de Negocia√ß√£o: {symbol_info.get('trade_mode', 'N/A')}\n"
        
        return result

class MultiSymbolInfoExample(BaseExample, ApiKeyRequiredMixin):
    """
    Exemplo estendido para consultar m√∫ltiplos s√≠mbolos
    Demonstra o princ√≠pio Open/Closed (extens√£o sem modifica√ß√£o)
    """
    
    def __init__(self, client: ApiClient, symbols: list = None):
        super().__init__(client)
        self.symbols = symbols or TEST_SYMBOLS[:3]  # Primeiros 3 s√≠mbolos
    
    def execute(self) -> dict:
        """Executar chamadas para m√∫ltiplos s√≠mbolos"""
        results = {}
        
        for symbol in self.symbols:
            payload = {"symbol": symbol}
            response = self.client.post("/GetSymbolInfo/", payload)
            results[symbol] = response
        
        return {"OK": True, "Resposta": results}
    
    def get_description(self) -> str:
        return f"GetSymbolInfo (M√∫ltiplos) - Informa√ß√µes de {len(self.symbols)} s√≠mbolos"
    
    def format_response(self, response: dict) -> str:
        """Formato customizado para m√∫ltiplos s√≠mbolos"""
        if not response.get("OK"):
            return super().format_response(response)
        
        results = response.get("Resposta", {})
        output = f"‚úÖ Consultando {len(self.symbols)} s√≠mbolos:\n\n"
        
        for symbol, symbol_response in results.items():
            if symbol_response.get("OK"):
                info = symbol_response.get("Resposta", {})
                output += f"üî∏ {symbol}: {info.get('description', 'N/A')}\n"
                output += f"   üí± {info.get('currency_base', 'N/A')}/{info.get('currency_profit', 'N/A')}\n"
                output += f"   üìä D√≠gitos: {info.get('digits', 'N/A')}, Ponto: {info.get('point', 'N/A')}\n\n"
            else:
                output += f"‚ùå {symbol}: {symbol_response.get('Error', 'Erro desconhecido')}\n\n"
        
        return output

def main():
    """Executar exemplos GetSymbolInfo"""
    # Configurar cliente
    config = ApiConfig(API_BASE_URL, API_KEY)
    client = ApiClient(config)
    
    print("üéØ Exemplos GetSymbolInfo")
    print("=" * 50)
    
    # Exemplo 1: S√≠mbolo √∫nico
    print("\n1Ô∏è‚É£ Consultando s√≠mbolo √∫nico:")
    single_example = GetSymbolInfoExample(client, "EURUSD")
    single_example.run()
    
    # Exemplo 2: M√∫ltiplos s√≠mbolos
    print("\n2Ô∏è‚É£ Consultando m√∫ltiplos s√≠mbolos:")
    multi_example = MultiSymbolInfoExample(client, ["EURUSD", "USDJPY", "GBPUSD"])
    multi_example.run()

if __name__ == "__main__":
    main()